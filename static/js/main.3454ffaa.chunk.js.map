{"version":3,"sources":["Visualizers/BinarySearchTree/BST.js","Visualizers/BinarySearchTree/BSTGraphic.js","Visualizers/BinarySearchTree/BSTControls.js","Visualizers/BinarySearchTree/BSTVisualizer.js","App.js","serviceWorker.js","index.js"],"names":["BinarySearchTree","_this","this","Object","classCallCheck","find","data","info","arguments","length","undefined","findHelper","root","left","right","insert","node","coordinate","x","y","path","insertHelper","push","display","console","log","coordinateToPosition","width","Math","pow","BSTGraphic","_Component","_getPrototypeOf2","_len","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","item","coordinates","props","bst","nodeDiv","document","createElement","addEventListener","fetch","then","resp","json","memeURL","memes","parseInt","random","url","memeImage","src","style","zIndex","position","top","height","getElementById","appendChild","nodeSpan","textContent","classList","x1","y1","x2","y2","graphicWidth","cssText","position2","insertAdjacentHTML","inherits","createClass","key","value","window","getComputedStyle","getPropertyValue","action","payload","react_default","a","id","Component","BSTControls","delete","index_es","title","className","label","name","variant","onClick","Add_default","BSTVisualizer","setState","state","BSTGraphic_BSTGraphic","BinarySearchTree_BSTControls","App","react_router_dom","react_router","component","Boolean","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3454ffaa.chunk.js","sourcesContent":["export class BinarySearchTree {\n    constructor() {\n        this.root = null;\n    }\n    find = (data, info = 'data') => {\n        return findHelper(this.root, data, info);\n    }\n    insert = (data) => {\n        let node = {\n            data : data,\n            coordinate:{\n                x: 1,\n                y: 1\n            },\n            path: [{x: 1, y: 1}],\n            left : null,\n            right: null\n        };\n        this.root = insertHelper(this.root, node);\n    }\n    display = () => {\n        console.log(this.root);\n    }\n}\nfunction findHelper(root, data, info){\n    if(root == null){\n        return null;\n    }\n    if(root.data === data){\n        return root[info];\n    } \n    if(data < root.data){\n        return findHelper(root.left, data, info);\n    }\n    if(data > root.data){\n        return findHelper(root.right, data, info);\n    }\n}\nfunction insertHelper(root, node){\n    if(root == null){\n        root = node;\n        return root;\n    } \n    node['coordinate']['y'] += 1;\n    if(node.data < root.data){\n        node['coordinate']['x'] = node['coordinate']['x'] * 2 - 1;\n        node['path'].push({x: node['coordinate']['x'], y: node['coordinate']['y']});\n        root.left = insertHelper(root.left, node);\n        return root;\n    }\n    if(node.data > root.data){\n        node['coordinate']['x'] *= 2;\n        node['path'].push(node['coordinate']);\n        root.right = insertHelper(root.right, node);\n        return root;\n    }\n}\nexport default BinarySearchTree;","import React, { Component } from 'react';\nimport './styles/BSTGraphic.css';\n\n\nfunction coordinateToPosition(width, x, y){\n    let position = {\n        x: x * width / (Math.pow(2, y -1 ) + 1),\n        y: 100 * y\n    }\n    return position;\n}\n\nfunction nodeLink(x1, y1, x2, y2){\n    console.log(x1, y1, x2, y2);\n    x1+=20;\n    y1+=20;\n    x2+=20;\n    y2+=20;\n    return `<svg width=\"1000\" height=\"1000\"><line class=\"node-link\" dominant-baseline=\"hanging\" x1=\"${x1}\" y1=\"${y1}\" x2=\"${x2}\" y2=\"${y2}\"/></svg>`;\n}\n\nexport class BSTGraphic extends Component {\n    componentDidMount(){\n        this.graphicWidth = parseInt(window.getComputedStyle(document.getElementById('graphic')).getPropertyValue('width'));\n    }\n    componentDidUpdate(){\n        switch(this.props.action){\n            case 'insert':\n                this.insert(this.props.payload);\n                break;\n            case 'delete':\n                this.insert(this.props.payload);\n                break;  \n            default:\n                break;\n        }\n    }\n    insert = ( item ) => {\n        let coordinates = this.props.bst.find(item, 'coordinate');\n        if (coordinates == null){\n            return;\n        }\n        let path = this.props.bst.find(item, 'path');\n        let nodeDiv = document.createElement('div');\n        nodeDiv.addEventListener(\"click\", () => {\n            fetch('https://api.imgflip.com/get_memes').then(resp => {\n                return resp.json();\n            }).then(resp => {\n                let memeURL = resp.data.memes[parseInt(Math.random()*100)].url;\n                let memeImage = document.createElement('img');\n                memeImage.src = memeURL;\n                memeImage.style.zIndex = 10000;\n                memeImage.style.position = 'fixed';\n                memeImage.style.top = '20px';\n                memeImage.style.height = '69vh';\n                console.log(memeImage);\n                document.getElementById('root').appendChild(memeImage);\n            });\n        });\n        let nodeSpan = document.createElement('div')\n        nodeSpan.textContent = item;\n        nodeSpan.classList = 'node-span';\n        nodeDiv.appendChild(nodeSpan);\n        nodeDiv.classList = 'node';\n        let position = coordinateToPosition(this.graphicWidth, coordinates['x'], coordinates['y']);\n        nodeDiv.style.cssText = `top: ${position.y}px;left: ${position.x}px`;\n        if(path.length > 1){\n            let position2 = coordinateToPosition(this.graphicWidth, path[path.length - 2]['x'], path[path.length - 2]['y']);\n            document.getElementById('graphic').insertAdjacentHTML('beforeend', nodeLink(\n                position2['x'],\n                position2['y'],\n                position['x'],\n                position['y']\n            ));\n        }\n        document.getElementById('graphic').appendChild( nodeDiv );\n    }\n    render() {\n            return (\n            <div id=\"graphic\">\n                \n            </div>\n            )\n        }\n}\n\nexport default BSTGraphic;\n","import React, { Component } from 'react';\nimport './styles/BSTControls.css';\nimport {Card, CardHeader, TextField, IconButton} from '@material-ui/core';\nimport AddIcon from '@material-ui/icons/Add';\n\nexport class BSTControls extends Component {\n    insert = () => {\n        this.props.insert(parseInt(document.getElementById('user-insert').value));\n    }\n    delete = () => {\n        console.log(\"Delete Prompted!\");\n    }\n    render() {\n        return (\n            <Card >\n                <CardHeader title=\"Controls\" className=\"control-header\"/>\n                <hr className=\"no-margin\"/>\n                <div className=\"bst-controls\">\n                    <TextField\n                        id=\"user-insert\"\n                        label=\"Insert\"\n                        name=\"number\"\n                        variant=\"outlined\"\n                    />\n                    <IconButton variant=\"outlined\" onClick={this.insert}>\n                        <AddIcon/>\n                    </IconButton>\n                    <TextField\n                        id=\"user-insert\"\n                        label=\"Delete\"\n                        name=\"number\"\n                        variant=\"outlined\"\n                    />\n                    <IconButton variant=\"outlined\" onClick={this.delete}>\n                        <AddIcon/>\n                    </IconButton>\n                </div>\n            </Card>\n        )\n    }\n}\n\nexport default BSTControls;\n","import React, { Component } from 'react';\nimport { BinarySearchTree } from './BST.js';\nimport { BSTGraphic } from './BSTGraphic';\nimport BSTControls from './BSTControls.js';\nimport './styles/BSTVisualizer.css';\n\nexport class BSTVisualizer extends Component {\n    constructor(props){\n        super(props);\n        this.bst = new BinarySearchTree();\n        this.state = {\n            action: '',\n            payload: 0\n        }\n    }\n    insert = (item) => {\n        this.bst.insert(item);\n        this.setState({\n            action: 'insert',\n            payload: item\n        });\n    }\n    render() {\n        return (\n        <div className=\"visualizer\">\n            <BSTGraphic bst={this.bst} action={this.state.action} payload={this.state.payload}/>\n            <BSTControls insert={this.insert} />\n        </div>\n        )\n    }\n}\n\nexport default BSTVisualizer\n","import React, { Component } from 'react';\nimport { HashRouter, Route } from 'react-router-dom';\nimport BSTVisualizer from './Visualizers/BinarySearchTree/BSTVisualizer';\n\nclass App extends Component {\n    render() {\n        return (\n        <HashRouter>\n            <Route path='/' component={BSTVisualizer} />\n        </HashRouter>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}